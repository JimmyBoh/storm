/**
 * debug.js - This is a simple script that is used for debugging purposes only.
 */
"use strict";
const storm_1 = require('./storm');
const sparkly = require('sparkly');
// The equation we are trying to optimize!
const quadratic = function (x, y, z) {
    return -2 * Math.pow(y + z, 2) + 3 * Math.pow(x * z, 2) + 8 * x * y * z + -6 * x - 8 * z + 4 * y + 2 + Math.pow(Math.abs(z), 0.5);
};
let storm = new storm_1.Storm({
    params: {
        x: new storm_1.RandomFloat(-1000, 1000),
        y: new storm_1.RandomFloat(-1000, 1000),
        z: new storm_1.RandomFloat(-1000, 1000)
    },
    generationSize: 40,
    clone: 10,
    done: 4000,
    run: (data) => {
        // Just pass the parameters to the module to test.
        return quadratic(data.x, data.y, data.z);
    },
    score: function (record) {
        if (record.result === 0) {
            return 0;
        }
        // Invert the absolute results (closer to zero is the goal)
        return 1 / Math.abs(record.result);
    }
});
let startTime = Date.now();
console.log('Starting new simulation...');
storm
    .start()
    .then(results => {
    let duration = Date.now() - startTime;
    let maxChart = [];
    let avgChart = [];
    let i = 1;
    let check = results.totalGenerations / 40;
    results.generations.filter(g => i++ % check === 0).forEach(g => {
        //console.log(`Gen ${g.id}: Max=${g.max.score}, Avg=${g.avg}`);
        maxChart.push(g.max.score);
        avgChart.push(g.avg);
    });
    console.log('Max: ' + sparkly(maxChart));
    console.log('Max:', results.max);
    console.log('');
    console.log('Avg: ' + sparkly(avgChart));
    console.log(`(${results.totalGenerations} generations in ${Math.floor(duration / 100) / 10}s)`);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhhbXBsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9leGFtcGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOztHQUVHOztBQUVILHdCQUE4RSxTQUFTLENBQUMsQ0FBQTtBQUd4RixNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFFbkMsMENBQTBDO0FBQzFDLE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBUSxFQUFFLENBQVEsRUFBRSxDQUFTO0lBQ3ZELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsR0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFHLENBQUMsR0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2hILENBQUMsQ0FBQztBQUVGLElBQUksS0FBSyxHQUFHLElBQUksYUFBSyxDQUFDO0lBQ3BCLE1BQU0sRUFBRTtRQUNOLENBQUMsRUFBRSxJQUFJLG1CQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQy9CLENBQUMsRUFBRSxJQUFJLG1CQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQy9CLENBQUMsRUFBRSxJQUFJLG1CQUFXLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0tBQ2hDO0lBQ0QsY0FBYyxFQUFFLEVBQUU7SUFDbEIsS0FBSyxFQUFFLEVBQUU7SUFDVCxJQUFJLEVBQUUsSUFBSTtJQUNWLEdBQUcsRUFBRSxDQUFDLElBQVM7UUFDYixrREFBa0Q7UUFDbEQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFDRCxLQUFLLEVBQUUsVUFBVSxNQUFNO1FBQ3JCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QixNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ1gsQ0FBQztRQUVELDJEQUEyRDtRQUMzRCxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Q0FDRixDQUFDLENBQUM7QUFFSCxJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7QUFFM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRTFDLEtBQUs7S0FDRixLQUFLLEVBQUU7S0FDUCxJQUFJLENBQUMsT0FBTztJQUNYLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUM7SUFDdEMsSUFBSSxRQUFRLEdBQWEsRUFBRSxDQUFDO0lBQzVCLElBQUksUUFBUSxHQUFhLEVBQUUsQ0FBQztJQUU1QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO0lBQzFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUQsK0RBQStEO1FBQy9ELFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUVqQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRWhCLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLG1CQUFtQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2xHLENBQUMsQ0FBQyxDQUFDIn0=