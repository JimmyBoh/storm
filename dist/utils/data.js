"use strict";
class BaseGenerator {
    nextValue() {
        if (!this.iterator) {
            this.iterator = this.getValues();
        }
        return this.iterator.next().value;
    }
    nextValues(count) {
        let vals = [];
        for (let i = 0; i < count; i++) {
            vals.push(this.nextValue());
        }
        return vals;
    }
}
exports.BaseGenerator = BaseGenerator;
class OrderedNumber extends BaseGenerator {
    constructor(min, max, step) {
        super();
        this.min = min;
        this.range = max - min;
        this.step = step || 1;
    }
    *getValues() {
        let i = 0;
        while (true) {
            yield this.min + i;
            i += this.step;
            if (i > this.range)
                i = 0;
        }
    }
}
exports.OrderedNumber = OrderedNumber;
class RandomNumber extends BaseGenerator {
    constructor(min, max, isInteger) {
        super();
        this.min = min;
        this.max = max;
        this.range = max - min;
        this.isInteger = !!isInteger;
    }
    *getValues() {
        while (true) {
            let result = (Math.random() * this.range) + this.min;
            if (this.isInteger) {
                result = Math.floor(result);
            }
            yield result;
        }
    }
}
exports.RandomNumber = RandomNumber;
class RandomInteger extends RandomNumber {
    constructor(min, max) {
        super(min, max, true);
    }
}
exports.RandomInteger = RandomInteger;
class RandomFloat extends RandomNumber {
    constructor(min, max) {
        super(min, max, false);
    }
}
exports.RandomFloat = RandomFloat;
class OrderedItem extends BaseGenerator {
    constructor(values) {
        super();
        if (!(values instanceof Array)) {
            throw new Error(`'values' is required!`);
        }
        if (values.length === 0) {
            throw new Error(`'values' must have at least one element!`);
        }
        this.values = values;
    }
    *getValues() {
        let i = 0;
        while (true) {
            yield this.values[i];
            i = (i + 1) % this.values.length;
        }
    }
}
exports.OrderedItem = OrderedItem;
class ArgumentGenerator extends BaseGenerator {
    constructor(params) {
        super();
        if (!params) {
            throw new Error(`'params' is required!`);
        }
        if (Object.keys(params).length === 0) {
            throw new Error(`At least one property on 'param' must be defined to produce a unit!`);
        }
        this.params = params;
        this.props = Object.keys(this.params);
        this.lookup = new Map();
        this.props.forEach(prop => {
            this.lookup.set(prop, this.params[prop].getValues());
        });
    }
    *getValues() {
        while (true) {
            let obj = {};
            this.props.forEach(prop => {
                obj[prop] = this.lookup.get(prop).next().value;
            });
            yield obj;
        }
    }
}
exports.ArgumentGenerator = ArgumentGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFXQTtJQU1TLFNBQVM7UUFDZCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ25DLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUM7SUFDcEMsQ0FBQztJQUVNLFVBQVUsQ0FBQyxLQUFhO1FBQzdCLElBQUksSUFBSSxHQUFRLEVBQUUsQ0FBQztRQUNuQixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDOUIsQ0FBQztRQUVELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQztBQXRCcUIscUJBQWEsZ0JBc0JsQyxDQUFBO0FBRUQsNEJBQW1DLGFBQWE7SUFNOUMsWUFBWSxHQUFXLEVBQUUsR0FBVyxFQUFFLElBQWE7UUFDakQsT0FBTyxDQUFDO1FBQ1IsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxDQUFTLFNBQVM7UUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVYsT0FBTyxJQUFJLEVBQUUsQ0FBQztZQUNaLE1BQU0sSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENB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