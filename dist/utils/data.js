"use strict";
class BaseGenerator {
    nextValue() {
        if (!this.iterator) {
            this.iterator = this.getValues();
        }
        return this.iterator.next().value;
    }
    nextValues(count) {
        let vals = [];
        for (let i = 0; i < count; i++) {
            vals.push(this.nextValue());
        }
        return vals;
    }
}
exports.BaseGenerator = BaseGenerator;
class OrderedNumber extends BaseGenerator {
    constructor(min, max, step) {
        super();
        this.min = min;
        this.range = max - min;
        this.step = step || 1;
    }
    *getValues() {
        let i = 0;
        while (true) {
            yield this.min + i;
            i += this.step;
            if (i > this.range)
                i = 0;
        }
    }
}
exports.OrderedNumber = OrderedNumber;
class RandomNumber extends BaseGenerator {
    constructor(min, max, isInteger) {
        super();
        this.min = min;
        this.max = max;
        this.range = max - min;
        this.isInteger = !!isInteger;
    }
    *getValues() {
        while (true) {
            let result = (Math.random() * this.range) + this.min;
            if (this.isInteger) {
                result = Math.floor(result);
            }
            yield result;
        }
    }
}
exports.RandomNumber = RandomNumber;
class RandomInteger extends RandomNumber {
    constructor(min, max) {
        super(min, max, true);
    }
}
exports.RandomInteger = RandomInteger;
class RandomFloat extends RandomNumber {
    constructor(min, max) {
        super(min, max, false);
    }
}
exports.RandomFloat = RandomFloat;
class OrderedItem extends BaseGenerator {
    constructor(values) {
        super();
        if (!(values instanceof Array)) {
            throw new Error(`'values' is required!`);
        }
        if (values.length === 0) {
            throw new Error(`'values' must have at least one element!`);
        }
        this.values = values;
    }
    *getValues() {
        let i = 0;
        while (true) {
            yield this.values[i];
            i = (i + 1) % this.values.length;
        }
    }
}
exports.OrderedItem = OrderedItem;
class ArgumentGenerator extends BaseGenerator {
    constructor(params) {
        super();
        if (!params) {
            throw new Error(`'params' is required!`);
        }
        if (Object.keys(params).length === 0) {
            throw new Error(`At least one property on 'param' must be defined to produce a unit!`);
        }
        this.params = params;
        this.props = Object.keys(this.params);
        this.lookup = new Map();
        this.props.forEach(prop => {
            this.lookup.set(prop, this.params[prop].getValues());
        });
    }
    *getValues() {
        while (true) {
            let obj = {};
            this.props.forEach(prop => {
                obj[prop] = this.lookup.get(prop).next().value;
            });
            yield obj;
        }
    }
}
exports.ArgumentGenerator = ArgumentGenerator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFnQkE7SUFNUyxTQUFTO1FBQ2QsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNuQyxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDO0lBQ3BDLENBQUM7SUFFTSxVQUFVLENBQUMsS0FBYTtRQUM3QixJQUFJLElBQUksR0FBUSxFQUFFLENBQUM7UUFDbkIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQzlCLENBQUM7UUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQ2QsQ0FBQztBQUNILENBQUM7QUF0QnFCLHFCQUFhLGdCQXNCbEMsQ0FBQTtBQUVELDRCQUFtQyxhQUFhO0lBTTlDLFlBQVksR0FBVyxFQUFFLEdBQVcsRUFBRSxJQUFhO1FBQ2pELE9BQU8sQ0FBQztRQUNSLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsQ0FBUyxTQUFTO1FBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVWLE9BQU8sSUFBSSxFQUFFLENBQUM7WUFDWixNQUFNLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxD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